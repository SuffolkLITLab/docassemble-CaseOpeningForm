include:
  - docassemble.AssemblyLine:al_package.yml
  - review_screen.yml
  - case_type_dropdown.yml
  #- sections.yml
---
metadata:
  title: |
    Case Opening Form
  short title: |
    Case Opening Form
  authors:
    - LIT Lab
---
sections:
  - Instructions 
  - Clinic info
  - About your client 
  - Case information 
  - Opposing party
  - Contacts
  - Conflict check 
  - Download
---
features:
  navigation: True
  progress bar: True
---
mandatory: True
code: |
  menu_items = [ action_menu_item('Roadmap', 'road_map') ]
---
mandatory: True
comment: |
  This contains metadata that will not be overwritten if this YAML file is included in another
  file. Each file gets its own key in the interview_metadata dictionary.
  Most keys are not currently used at runtime, other than "allowed courts".
code: |
  interview_metadata
  if not defined("interview_metadata['Case_Opening_Form']"):
    interview_metadata.initializeObject("Case_Opening_Form")
    interview_metadata["Case_Opening_Form"].update({
      "al_weaver_version": "1.2.3",
      "generated on": "2021-10-13",
      "title": "Case Opening Form",
      "short title": "Case Opening Form",
      "description": "Case Opening Form for Clinical Programs at Suffolk University Law School",
      "original_form": "",
      "allowed courts": [
      ],
      "categories": [
      ],        
      "logic block variable": "interview_order_Case_Opening_Form",
      "attachment block variable": "Case_Opening_Form_attachment",
      "typical role": "na",
    })
---
code: |
  interview_metadata['main_interview_key'] =  'Case_Opening_Form'
---
code: |
  # This controls the default country and list of states in address field questions
  AL_DEFAULT_COUNTRY = "US"
---
code: |
  # This controls the default state in address field questions
  AL_DEFAULT_STATE = "MA"
---
code: |
  github_repo_name =  'docassemble-CaseOpeningForm'
---
code: |
  interview_short_title = "Fill Out the Clinical Programs Case Opening Form"
---
code: |
  al_form_type = 'other_form'
---
objects:
  - studentattorney: ALPeopleList.using(ask_number=True, complete_attribute='complete')
  - client: ALPeopleList.using(target_number=1,ask_number=True, complete_attribute='complete')
  - parent: ALPeopleList.using(target_number=1,ask_number=True)
  - contacts: ALPeopleList.using(object_type=Individual, complete_attribute='complete')
  - other_parties: ALPeopleList.using(target_number=1,ask_number=True, complete_attribute='complete')
  - exhibit_attachment: ALExhibitDocument.using(
          title="Exhibits",
          filename="exhibits",
          auto_gather=False,
          add_page_numbers=True,
          include_table_of_contents=False,
          include_exhibit_cover_pages=False,
        )

---
#################### Interview order #####################
comment: |
  Controls order and branching logic for questions specific to this form
id: interview_order_Case_Opening_Form
code: |
  # Set the allowed courts for this interview
  nav.get_section(display=True)
  allowed_courts = interview_metadata["Case_Opening_Form"]["allowed courts"]
  nav.set_section('Clinic_info')
  user_role = 'na'
  studentattorney.target_number
  studentattorney.gather()
  users[0].name.first = studentattorney[0].name.first
  users[0].name.last = studentattorney[0].name.last
  users.there_is_another = False
  Clinic_Practice_Area
  set_progress(25)
  interview_questions_choice
  client.gather()
  if interview_questions_choice == 'Detailed': 
    client_optional_info
    Client_Source_Income

  Case_Type
  if interview_questions_choice == 'Detailed': 
    Case_Description
  Court_Agency_Docket__number
  if interview_questions_choice == 'Detailed': 
    if other_party_option: 
      other_parties.gather()
  set_progress(50)
  if interview_questions_choice == 'Detailed': 
    contacts.there_are_any
    contacts.gather()
  ConflictCheckComplete
  if exhibit_attachment.exhibits.has_exhibits:
    exhibit_attachment.exhibits.gather()
  #nav.set_section('review_Case_Opening_Form')
  interview_order_Case_Opening_Form = True
---
###################### Main order ######################
comment: |
  This block includes the logic for standalone interviews.
  Delete mandatory: True to include in another interview
mandatory: True
code: |
  al_intro_screen
  Case_Opening_Form_intro
  interview_order_Case_Opening_Form
  #signature_date
  # Save anonymized interview statistics (customize the saved data below)
  #store_variables_snapshot(data={'zip': users[0].address.zip})
  #basic_questions_signature_flow
  Case_Opening_Form_download
---
id: fill in choice 
question: | 
  How would you like to proceed?
subquestion: | 
  It is recommended you go through the entire form and provide as much information as you can. Select **Detailed** to fill out the in depth case opening.
  
  If you have  limited information and need to open your case ASAP, you may choose the **Express** option to avoid in depth questions. **You will still need to go back and add the information in Clio, ** but it is important to open the case as soon as posssible.  
field: interview_questions_choice
choices: 
  - Detailed 
  - Express
---
id: Case_Opening_Form
continue button field: Case_Opening_Form_intro
question: |
  How to use this tool
subquestion: |
  * Provide as much information as you can but do not let missing information prevent you from moving forward; 
  
  * Each docket number requires its own case opening form;
  
  * You are responsible for copying the information into the Clio file once opened.
---
id: student attorney 
section: Clinic info
question: |
  How many student attorneys are assigned to this case?
fields:
  - Number: studentattorney.target_number
    datatype: integer
    min: 1
---
code: |
  studentattorney[i].name.first
  studentattorney[i].name.last
  studentattorney[i].complete = True
---
id: Background Information
sets:
  - studentattorney[i].name.first
  - studentattorney[i].name.last
question: |
  What is the ${ ordinal(i) } student attorney name?
fields:
  - code: |
      studentattorney[i].name_fields()
section: Clinic info
---
id: clinic information 
section: Clinic info
question: |
  Select your clinic 
fields: 
  - "Clinic": Clinic_Practice_Area
    maxlength: 28
    input type: dropdown
    choices:
      - Accelerator Practice: Accelerator Practice
      - Family Advocacy Clinic: Family Advocacy Clinic
      - Health Law Clinic: Health Law Clinic
      - Immigration Clinic: Immigration Clinic
      - Human Rights and Indigenous Peoples Clinic: Human Rights and Indigenous Peoples Clinic
      - Innocence Clinic: Innocence Clinic
      - Intellectual Property & Entrepreneurship Clinic: Intellectual Property & Entrepreneurship Clinic
      - Juvenile Defenders Clinic: Juvenile Defenders Clinic
      - Suffolk Defenders Program: Suffolk Defenders Program
      - Suffolk Prosecutors Program: Suffolk Prosecutors Program
      - Supreme Court Clinic: Supreme Court Clinic
      - Transactional Clinic: Transactional Clinic
  - "Supervisor Name": Supervisor_name
    maxlength: 86
    input type: dropdown
    choices:
      - William Berman: William Berman
      - Ilene Seidman: Ilene Seidman
      - James Matthews: James Matthews
      - Maritza Karmely: Maritza Karmely
      - Chris Butler: Chris Butler
      - Sarah Boonin: Sarah Boonin
      - Ragini Shah: Ragini Shah
      - Nicole Friederichs: Nicole Friederichs
      - Shira Diner: Shira Diner
      - Kim McLaurin: Kim McLaurin
      - Loletta Darden: Loletta Darden
      - Vanessa Hernandez: Vanessa Hernandez
      - Chris Dearborn: Chris Dearborn
      - Christina Miller: Christina Miller
      - Jeffrey Pokorak: Jeffrey Pokorak
      - Ragini Shah: Ragini Shah
      - Other: Other
  - "Other Supervisor": Supervisor_name
    show if:
      variable: Supervisor_name
      is: Other
--- 
id: Case information 
section: Case information
question: | 
  Case Information
fields:
  - "Case Type": Case_Type
    datatype: dropdown 
    code: case_types[Clinic_Practice_Area]
  - "Case description": Case_Description
    maxlength: 42
    hint: e.g., Representing defendant in drug court
    required: False
  - "Docket #": Court_Agency_Docket__number
    maxlength: 96
    required: False
  - "Case  synopsis": Case__synopsis
    input type: area
    hint: e.g., List of charges, description of complaint
    maxlength: 910
    required: False
  - "Referral source": Referral_Source
    maxlength: 84
    required: False
    hint: e.g., Duty day, Word of mouth, etc.
  - "Scope of representation": Scope_Of_Representation
    maxlength: 96
    required: False
    hint: e.g., Full, Bail only, etc.
continue button: additional_case_info
---
id: optional case information 
question: | 
  Court information
fields: 
  - "Judge name": Judge_name
    maxlength: 48
    required: False
  - "Court or Agency name": Court_Agency
    maxlength: 42
    required: False
    hint: e.g. Boston Municipal Court  
---
id: client gather 
code: |
  client[i].name.first
  client[i].name.last
  client[i].birthdate
  unhoused_logic
  client[i].mobile_number
  client[i].primary_language
  client[i].immigration_status
  client[i].complete = True
---
id: unhoused client logic 
code: | 
  if unhoused_client == True:
    client[i].address.address = 'Client is homeless'
    client[i].address.city = ' '
    client[i].address.state = ' ' 
    client[i].address.zip = ' '
  unhoused_logic = True 
---
id: Client Basic Information
generic object: ALPeopleList
sets:
  - client[i].name.first
  - client[i].name.last
question: |
  Tell us about your client
subquestion: | 
  If your client is the company use the name fields to provide the main contact
fields:
  - code: |
      client[i].name_fields()
  - "Company": Client_Company 
    required: False 
    hint: e.g. Alphabet Inc.
  - "Title/Role": Client_Title
    required: False
    hint: e.g. CEO, Main contact 
  - "Aliases or other names": Client_Aliases
    maxlength: 80
    required: False
  - "Notes about Client": Client_Notes
    input type: area
    maxlength: 360
    required: False
section: About your client
---
id: additional client info
section: About your client
question: | 
  Demographic information about ${client[i].name.first}
subquestion: |
  If the information is unknown or not applicable that is okay.
fields: 
  - "Birthdate": client[i].birthdate
    required: False
    datatype: date
    maxlength: 12
  - "Gender expression": Client_gender
    maxlength: 33
    required: False
  - "Race": Client_Race
    maxlength: 100
    required: False 
  - "Marital status": Client_MaritalStatus
    maxlength: 98
    required: False
continue button field: client_optional_info
---
id: Client Contact Information
section: About your client 
sets: 
  - client[i].mobile_number
  - client[i].phone_number
  - client[i].email   
question: |
  Enter  ${client[i].name.first}'s contact information
fields:  
  - Mobile number: client[i].mobile_number
    required: False
  - Alternative phone number: client[i].phone_number
    required: False
  - Second alternative phone number: client[i].alternative_number
    required: False
  - Email address: client[i].email    
    datatype: email
    required: False
---
generic object: ALIndividual
id: client address
section: About your client
question: |
  What is ${client[i].name.first}'s address?
fields:
  - Address is public housing: Client_Public_Housing
    datatype: yesnowide
  - Client is homeless: unhoused_client
    datatype: yesnowide
    disable others: True
  - Address: client[i].address.address
    address autocomplete: True
    required: False
  - Unit: client[i].address.unit
    required: False
  - City: client[i].address.city
    required: False
  - State: client[i].address.state
    required: False
    code: |
      states_list()
  - Zip: client[i].address.zip
    required: False
  #- code: |
      #client[i].address.address_fields(country_code=AL_DEFAULT_COUNTRY, default_state=AL_DEFAULT_STATE)
---
id: client language questions 
section: About your client 
generic object: ALIndividual
sets: 
  - client[i].primary_language
  - client[i].immigration_status
question: |
  What is ${ client[i].name.first }'s primary language?
fields: 
  - "Client requires an interpreter": Client_Interpreter
    datatype: yesno
  - "Primary language": client[i].primary_language
    required: False
  - "Immigration status": client[i].immigration_status
    required: False
    hint: e.g. US Citizen, Work Visa, Undocumented
---
id: Client Background Information
section: About your client 
question: |
  Information about ${ client[0].name.first}'s household
fields:
  - "Source of income": Client_Source_Income
    maxlength: 100
    required: False
  - "Household monthly income": Client_Income
    maxlength: 40
    required: False
  - "Number of people in their household": Client_Number_Household
    maxlength: 5
    required: False
  - "Number of dependents": Client_NumberOfDependents
    maxlength: 5
    required: False
--- 
id: client language information 
question: | 
   adkfjladsjf
fields: 
  - "Client number of dependents": Knows_Client_NumberOfDependents
    datatype: yesno   
  - "Client number of dependents": Client_NumberOfDependents
    maxlength: 96
    required: False
    show if: Knows_Client_NumberOfDependents
  - "Client number household": Knows_Client_Number_Household
    datatype: yesno   
  - "Client number household": Client_Number_Household
    maxlength: 78
    required: False
    show if: Knows_Client_Number_Household
  - note: |
      *Language and Immigration Information*
  - "Client primary languages": Client_Primary_Languages
    maxlength: 38
    required: False 
    show if: Knows_Client_Primary_Languages
  - "Client interpreter": Knows_Client_Interpreter
    datatype: yesno
  - "Client interpreter": Client_Interpreter
    maxlength: 17
    required: False 
    show if: Knows_Client_Interpreter
  - "Client primary languages": Knows_Client_Primary_Languages
    datatype: yesno
  - "Client immigration status": Knows_Client_Imm_Status
    datatype: yesno
  - "Client immigration status": Client_Imm_Status
    maxlength: 21
    required: False
    show if: Knows_Client_Imm_Status
---
id: have other party?
section: Other pary 
question: | 
  Do you know who the other party is? 
yesno: other_party_option
---
id: other party gather 
code: |
  other_parties[i].name
  other_parties_address_logic 
  other_parties[i].mobile_number
  other_parties[i].primary_language
  other_parties[i].complete = True
---
sets:
  - other_parties[i].name.first
  - other_parties[i].name.last
  - other_parties[i].name.middle
  - other_parties[i].name.suffix
id: opposition information
section: Opposing party
question: |
  Information about the other side
subquestion: | 
  If the Commonwealth is the opposing party provide the assigned District Attorney's information  
fields:
  - First name: other_parties[i].name.first
    required: False
  - Middle name: other_parties[i].name.middle
    required: False
  - Last name: other_parties[i].name.last
    required: False
  - Suffix: other_parties[i].name.suffix
    required: False
  - "Company": Opp_Company
    required: False
    hint: e.g. Alphabet, Inc., Suffolk DA 
  - "Title/Role": opp_title
    required: False
    hint: CEO, ADA
  - "Aliases or other names": opp_Aliases_names
    maxlength: 180
    required: False
  - "Date of birth": other_parties[i].birthdate
    datatype: date
    required: False
    maxlength: 11
  - "Gender expression": opp_GenderExpression
    maxlength: 66
    required: False
  - "Notes about the opposition": opp_Notes
    input type: area
    maxlength: 270
    required: False
---
id: other party logic 
code: |
  if op_address_unknown == True:
    other_parties[i].address.address = 'Unknown'
    other_parties[i].address.city = ' '
    other_parties[i].address.state = ' ' 
    other_parties[i].address.zip = ' '
  other_parties_address_logic = True 
---
generic object: ALIndividual
id: other party address
section: Opposing party
question: |
  What is ${other_parties[i].name.first}'s address?
fields:
  - Address unknown: op_address_unknown
    datatype: yesno
    disable others: True
  - Address: other_parties[i].address.address
    address autocomplete: True
    required: False
  - Unit: other_parties[i].address.unit
    required: False
  - City: other_parties[i].address.city
    required: False
  - State: other_parties[i].address.state
    required: False
    code: |
      states_list()
  - Zip: other_parties[i].address.zip
    required: False
---
id: Opposition Contact Information
secton: Opposing party 
question: |
  Enter  ${other_parties[0].name.first}'s contact information
fields:  
  - Phone number: other_parties[0].mobile_number
    required: False
  - Alternative phone number: other_parties[0].phone_number
    required: False
  - Second alternative phone number: other_parties[0].alternative_number 
    required: False
  - Email address: other_parties[0].email    
    datatype: email
    required: False
---
id: other party language questions 
section: Opposing party
generic object: ALIndividual
sets: 
  - other_parties[i].primary_language
question: |
  What is ${ other_parties[i].name.first }'s primary language(s) 
fields: 
  - "${ other_parties[i].name.first } requires an interpreter": Opp_Interpreter
    datatype: yesno
  - "Primary language(s)": other_parties[i].primary_language
    required: False
---
id: any contacts
question: |
  Do you have any contacts to add? 
yesno: contact.there_are_any
---
id: contacts gather
code: |
  contacts[i].name.first
  contacts[i].name.last
  contacts[i].relationship
  contacts[i].address.address
  contacts[i].mobile_number
  contacts[i].complete = True
---
id: contact relationship
section: Contacts
generic object: ALIndividual
question: |
  What is ${ contacts[i].name.first}'s relationship to the case?
fields:
  - no label: contacts[i].relationship
    maxlength: 50
    hint: e.g Witness, alleged victim, parent
---
id: contacts contact info
section: Contacts
generic object: ALIndividual
question: | 
  What is ${ contacts[i].name.first}'s contact information 
fields: 
  - "Phone number": contacts[i].phone_number
    required: False
  - "Mobile number": contacts[i].mobile_number 
    maxlength: 50
    required: False
  - "Contact email": contacts[i].email 
    maxlength: 39
    required: False
--- 
generic object: ALIndividual
section: Contacts
id: contact address 
question: |
  What is ${contacts[i].name.first}'s address?
fields:
  - Address: contacts[i].address
    address autocomplete: True
    required: False
  - Unit: contacts[i].unit
    required: False
  - City: contacts[i].city
    required: False
  - State: contacts[i].state
    required: False
    code: |
      states_list()
  - Zip: contacts[i].zip
    required: False
  #- code: |
      #contacts[i].address.address_fields(country_code=AL_DEFAULT_COUNTRY, default_state=AL_DEFAULT_STATE)
---
id: another contact 
section: Contacts
question: |
  Do you have another contact to add to the case?
subquestion: |
  % if len(contacts.elements) > 0:  
  So far you have told us about ${comma_and_list(contacts.complete_elements())}.
  % endif
yesno: contacts[i].there_is_another 
---
id: Conflict Information
section: Conflict check 
question: |
  Conflict Check
fields:
  - "Conflict check complete": ConflictCheckComplete
    datatype: yesnowide
  - "Conflict check results attached": ConflictCheckResultsAttached
    show if: ConflictCheckComplete
    required: False
    datatype: yesnowide
  - note: |
      You will have an opportunity to upload and attach your conflict check results on the next screen 
    show if: ConflictCheckComplete
  - "Date of conflict check": Date_ConflictCheck
    datatype: date
    default: ${today()}
    show if: ConflictCheckComplete
  - "Description of conflict check": Description_Conflict
    show if: ConflictCheckComplete
    input type: area
    maxlength: 294
---
code: |
  signature_fields = []
---
id: download Case_Opening_Form
section: Download
event: Case_Opening_Form_download
question: |
  Your form is ready to download.
subquestion: |
  Thank you ${users}. Your form is ready to download and/or email.
  
  Email a copy to yourself and forward to your supervisor for their sign off. 

  View, download and send your form below. Click the "Make changes" button to fix any mistakes.
  
  ${ al_user_bundle.download_list_html() }
  

  ${ al_user_bundle.send_button_html(show_editable_checkbox=True) }

progress: 100
---
objects:
  - Post_interview_instructions: ALDocument.using(title="Instructions", filename="Case_Opening_Form_next_steps.docx", enabled=True, has_addendum=False)
  - Case_Opening_Form_attachment: ALDocument.using(title="Case Opening Form", filename="Clinical_Programs_Case_Opening_Form_1.pdf", enabled=True, has_addendum=True) 
---
objects:
  - al_user_bundle: ALDocumentBundle.using(elements=[Case_Opening_Form_attachment, exhibit_attachment ], filename="Case_Opening_Form_package.pdf", title="All forms to download for your records", enabled=True)
  - al_recipient_bundle: ALDocumentBundle.using(elements=[Case_Opening_Form_attachment, exhibit_attachment], filename="Case_Opening_Form_package.pdf", title="All forms to download for your records", enabled=True)
---
attachments:
  - name: Post interview instructions
    filename: Post-interview-instructions     
    variable name: Post_interview_instructions[i]        
    docx template file: Case_Opening_Form_next_steps.docx
  - name: Case Opening Form attachment
    filename: Case_Opening_Form     
    variable name: Case_Opening_Form_attachment[i]        
    skip undefined: True
    pdf template file: Clinical_Programs_Case_Opening_Form_1.pdf
    fields:
      - "Today_date": ${ today(format='MM/dd/YYYY') }
      - "Supervisor_name": ${ Supervisor_name }
      - "Clinic_Practice_Area": ${ Clinic_Practice_Area }
      - "Student_Atty_name": ${ studentattorney }
      - "ConflictCheckResultsAttached": ${ ConflictCheckResultsAttached }
      - "ConflictCheckComplete": ${ ConflictCheckComplete }
      - "Date_ConflictCheck": ${ Date_ConflictCheck.format_date('MM/dd/YY')}
      - "Description_Conflict": ${ Description_Conflict }
      
      - "Case_Description": ${ Case_Description }
      - "Judge_name": ${ Judge_name }
      - "Court_Agency": ${ Court_Agency }
      - "Court_Agency_Docket__number": ${ Court_Agency_Docket__number }
      - "Referral_Source": ${ Referral_Source }
      - "Scope_Of_Representation": ${ Scope_Of_Representation }
      - "Case_Type": ${ Case_Type }
      - "Case__synopsis": ${ Case__synopsis }
      
      - "client_birthdate": ${ client[0].birthdate.format_date('MM/dd/YYYY')}
      - "Client_gender": ${ Client_gender }
      - "Client_Name": ${ client[0].name }
      - "Client_Company": ${ Client_Company }
      - "Client_title": ${ Client_Title }
      - "Client_MaritalStatus": ${ Client_MaritalStatus }
      - "Client_Aliases": ${ Client_Aliases }
      - "Client_address_street": ${ client[0].address.address }
      - "Client_address_city": ${ client[0].address.city }
      - "Client_address_zip": ${ client[0].address.zip }
      - "Client_Public_Housing": | 
          % if Client_Public_Housing == True:
          ${ Client_Public_Housing }
          % endif
      - "client_phone_number": ${ client[0].mobile_number}
      - "client_other1_number": ${ client[0].phone_number }
      - "client_other2_number": ${ client[0].alternative_number  }
      - "Client_Interpreter": | 
          % if Client_Interpreter == True: 
          Yes
          % endif
      - "Client_Primary_Languages": ${ client[0].primary_language  }
      - "Client_Race": ${ Client_Race }
      - "Client_Imm_Status": ${ client[0].immigration_status }
      - "Client_email": ${ client[0].email }
      - "Client_Income": ${ Client_Income }
      - "Client_Source_Income": ${ Client_Source_Income }
      - "Client_NumberOfDependents": ${ Client_NumberOfDependents }
      - "Client_Number_Household": ${ Client_Number_Household }
      - "Client_Notes": ${ Client_Notes }
      
      - "opp_DateOfBirth": ${ other_parties[0].birthdateformat_date('MM/dd/YYYY') }
      - "opp_name": ${ other_parties[0].name.full() }
      - "opp_GenderExpression": ${ opp_GenderExpression }
      - "opp_title": ${ opp_title }
      - "opp_company": ${ Opp_Company }
      - "opp_Aliases_names": ${ opp_Aliases_names }
      - "opp_address_city": ${ other_parties[0].address.city }
      - "opp_address_zip": ${ other_parties[0].address.zip }
      - "opp_address_street": ${ other_parties[0].address.address }
      - "opp_alt1_number": ${ other_parties[0].phone_number }
      - "opp_alt2_number": ${ other_parties[0].alternative_number }
      - "opp_phone_number": ${ other_parties[0].mobile_number }
      - "Opp_Interpreter": |
          % if Opp_Interpreter == True: 
          Yes
          % endif
      - "opp_PrimaryLanguages": ${ other_parties[0].primary_language }
      - "opp_email": ${ other_parties[0].email }
      - "opp_Notes": ${ opp_Notes }
      
      - "Contact1_relation": ${ contacts[0].relationship }
      - "Contact1_name": ${ contacts[0].name.full() }
      - "Contact1_email": ${ contacts[0].email }
      - "Contact1_phone_number": ${ contacts[0].phone_numbers() }
      - "Contact1_Address_same": ${ Contact1_Address_same }
      - "Contact1_address_line_two": ${ contacts[0].address.line_two() }
      - "Contact1_address_street": ${ contacts[0].address.line_one() }
      - "Contact1_address_zip": ${ contacts[0].address.zip }

      
      - "Contact2_name": ${ contacts[1].name.full() }
      - "Contact2_relation": ${ contacts[1].relationship}
      - "Contact2_email": ${ contacts[1].email  }
      - "Contact2_phone_number": ${ contacts[1].phone_number }
      - "Contact2_other_number": ${ contacts[1].mobile_number }
      - "Contact2_Address_same": ${ Contact2_Address_same }
      - "Contact2_address_street": ${ contacts[1].address.address }
      - "Contact2_address_city": ${ contacts[1].address.city }
      - "Contact2_address_state": ${ contacts[1].address.state }
      - "Contact2_address_zip": ${ contacts[1].address.zip }
      
      - "Contact3_name": ${ contacts[2].name.full() }
      - "Contact3_relation": ${ contacts[2].relationship}
      - "Contact3_email": ${ contacts[2].email  }
      - "Contact3_phone_number": ${ contacts[2].phone_number }
      - "Contact3_other_number": ${ contacts[2].mobile_number }
      - "Contact3_Address_same": ${ Contact3_Address_same }
      - "Contact3_address_street": ${ contacts[2].address.address }
      - "Contact3_address_city": ${ contacts[2].address.city }
      - "Contact3_address_state": ${ contacts[2].address.state }
      - "Contact3_address_zip": ${ contacts[2].address.zip }

      - "Contact4_name": ${ contacts[3].name.full() }
      - "Contact4_relation": ${ contacts[3].relationship}
      - "Contact4_email": ${ contacts[3].email  }
      - "Contact4_phone_number": ${ contacts[3].phone_number }
      - "Contact4_other_number": ${ contacts[3].mobile_number }
      - "Contact4_Address_same": ${ Contact3_Address_same }
      - "Contact4_address_street": ${ contacts[3].address.address }
      - "Contact4_address_city": ${ contacts[3].address.city }
      - "Contact4_address_state": ${ contacts[3].address.state }
      - "Contact4_address_zip": ${ contacts[3].address.zip }
---
attachment:
  - name: addendum
    filename: addendum
    variable name: Case_Opening_Form_attachment.addendum
    docx template file: contacts_addendum.docx
---
code: |
  Case_Opening_Form_attachment.overflow_fields['contacts'].overflow_trigger = 4 
  Case_Opening_Form_attachment.overflow_fields.gathered = True
---
mandatory: True
code: |
  exhibit_attachment.exhibits.auto_labeler = lambda y: str(y+1)
---
generic object: ALExhibitList
id: any exhibits
section: Conflict check 
question: |
  % if al_form_type in ['starts_case','existing_case','appeal']:
  Do you have any documents that you want to provide to the court?
  % else:
  Do you have any documents that you want to attach to this form?
  % endif
subquestion: | 
  Include screenshots from the conflict or any additional opening forms
fields:
  - Do you have any documents you want to upload?: x.has_exhibits
    datatype: yesnoradio
  - note: |
      **Okay**. You will have a chance to upload multiple documents. 
      You can also add additional pages to this document.
    show if: x.has_exhibits
  - First document title: x[0].title
    maxlength: 60 # longer might break TOC
    show if: x.has_exhibits    
  - Upload the first document: x[0].pages
    show if: x.has_exhibits    
    datatype: files
    maximum image size: 1024
    image upload type: jpeg        
    accept: |
      "image/png, image/jpeg, .doc,.docx,application/msword,application/vnd.openxmlformats-officedocument.wordprocessingml.document,application/pdf,.pdf"   
validation code: |
  if x.has_exhibits:
    if sum(exhibit.size_in_bytes() for exhibit in x[0].pages) > (15 * 1024 * 1024):
      validation_error("Upload a file smaller than 15 MB.")
    try:
      pdf_concatenate(x[0].pages)
    except:
      validation_error("Unable to convert this file. Please upload a new one.", field="x[0].pages")
    x[0].pages.reset_gathered()  # docassemble sets this attribute but we want to force gathering additional pages
---
id: basic questions intro screen
decoration: form-lineal
section: Instructions
question: |
  ${interview_short_title}: ${ AL_ORGANIZATION_TITLE}
subquestion: |

  The ${ AL_ORGANIZATION_TITLE } Project can help you complete the Clinical Programs Case Opening Form. 

  Step 1. Answer questions that will fill in your form for you.  
  Step 2. Preview the completed form.  
  Step 3. Download and print the final form.  [BR]
  Step 4. Share the completed form to your supervisior for their approval. [BR]
  Step 5. Once approved, forward to Joan for new matter creation. 
  [BR]
  Step 5. Save a copy to the client file. 
  
  Tap the {green words} in any screen for a definition or more information.

fields:
  - To continue, you must accept our [terms of use](${ AL_ORGANIZATION_HOMEPAGE }/privacy/): acknowledged_information_use
    datatype: checkboxes
    none of the above: False    
    minlength: 1
    choices:
      - I accept the terms of use.
    validation messages:
      minlength: |
        You cannot continue unless you agree to the terms of use.        
continue button field: al_intro_screen
terms:
  green words: |
    Green words are legal terms or a short way of referring to something that needs more explanation. The definition or explanation pops up when you tap the green words.
right: |
  % if user_has_saved_answers:
  ${fa_icon("bell", color="primary", size="sm")}
  Saved answers available!  
  
  ${action_button_html(url_action('load_answer'), icon="folder-open", label=word("View answers"), size="sm" )}
  % endif
---


